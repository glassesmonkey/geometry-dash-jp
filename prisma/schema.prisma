generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model Waitlist {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  email      String   @unique
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  credit           Int              @default(5)
  stripeCustomerId String?          @unique
  accounts         Account[]
  generatedImages  GeneratedImage[]
  sessions         Session[]
  transactions     Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GeneratedImage {
  id        String   @id @default(cuid())
  userId    String
  imageUrl  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model Transaction {
  id            String   @id @default(cuid())
  userId        String
  amount        Int
  description   String
  createdAt     DateTime @default(now())
  stripeEventId String?  @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
